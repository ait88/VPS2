#!/bin/bash
# wordpress-mgmt/lib/wordpress.sh - WordPress installation and management
# Version: 3.0.0

install_wordpress() {
    info "Installing WordPress..."
    
    if state_exists "WORDPRESS_INSTALLED"; then
        info "✓ WordPress already installed"
        return 0
    fi
    
    local wp_version=$(load_state "WP_VERSION" "latest")
    
    if [ "$wp_version" = "skip" ]; then
        info "Skipping WordPress installation as requested"
        return 0
    fi
    
    # Installation steps
    show_progress 1 6 "Downloading WordPress"
    download_wordpress "$wp_version"
    
    show_progress 2 6 "Extracting WordPress files"
    extract_wordpress
    
    show_progress 3 6 "Configuring WordPress"
    configure_wordpress
    
    show_progress 4 6 "Setting permissions"
    set_wordpress_permissions
    
    show_progress 5 6 "Installing plugins"
    install_default_plugins
    
    show_progress 6 6 "Finalizing installation"
    finalize_wordpress_install
    
    save_state "WORDPRESS_INSTALLED" "true"
    success "✓ WordPress installed successfully"
}

download_wordpress() {
    local version=$1
    local wp_root=$(load_state "WP_ROOT")
    local wp_user=$(load_state "WP_USER")
    
    # Create temporary directory
    local temp_dir="/tmp/wordpress-install-$$"
    mkdir -p "$temp_dir"
    
    # Download WordPress
    if [ "$version" = "latest" ]; then
        info "Downloading latest WordPress..."
        curl -sL https://wordpress.org/latest.tar.gz -o "$temp_dir/wordpress.tar.gz"
    else
        info "Downloading WordPress $version..."
        curl -sL "https://wordpress.org/wordpress-$version.tar.gz" -o "$temp_dir/wordpress.tar.gz"
    fi
    
    # Verify download
    if [ ! -f "$temp_dir/wordpress.tar.gz" ]; then
        error "Failed to download WordPress"
        return 1
    fi
    
    # Extract to verify
    tar -tzf "$temp_dir/wordpress.tar.gz" >/dev/null 2>&1 || {
        error "Downloaded file is not a valid tar.gz"
        return 1
    }
    
    save_state "WP_TEMP_DIR" "$temp_dir"
    debug "WordPress downloaded to $temp_dir"
}

extract_wordpress() {
    local temp_dir=$(load_state "WP_TEMP_DIR")
    local wp_root=$(load_state "WP_ROOT")
    local wp_user=$(load_state "WP_USER")
    
    # Create WordPress root directory
    sudo mkdir -p "$wp_root"
    
    # Extract WordPress
    info "Extracting WordPress files..."
    cd "$temp_dir"
    tar -xzf wordpress.tar.gz
    
    # Move files to destination
    sudo rsync -a wordpress/ "$wp_root/"
    
    # Clean up
    rm -rf "$temp_dir"
    
    debug "WordPress extracted to $wp_root"
}

configure_wordpress() {
    local wp_root=$(load_state "WP_ROOT")
    local domain=$(load_state "DOMAIN")
    local db_name=$(load_state "DB_NAME")
    local db_user=$(load_state "DB_USER")
    local db_pass=$(load_state "DB_PASS")
    
    info "Configuring WordPress..."
    
    # Copy wp-config-sample.php
    sudo cp "$wp_root/wp-config-sample.php" "$wp_root/wp-config.php"
    
    # Generate salts
    local salts=$(curl -sL https://api.wordpress.org/secret-key/1.1/salt/)
    
    # Create wp-config.php with security enhancements
    sudo tee "$wp_root/wp-config.php" >/dev/null <<EOF
<?php
/**
 * WordPress Configuration File
 * Generated by setup-wordpress.sh
 */

// Database settings
define( 'DB_NAME', '$db_name' );
define( 'DB_USER', '$db_user' );
define( 'DB_PASSWORD', '$db_pass' );
define( 'DB_HOST', 'localhost' );
define( 'DB_CHARSET', 'utf8mb4' );
define( 'DB_COLLATE', 'utf8mb4_unicode_520_ci' );

// Table prefix (randomized for security)
\$table_prefix = 'wp_$(generate_password 6 | tr '[:upper:]' '[:lower:]' | tr -d '[:punct:]')_';

// Authentication keys and salts
$salts

// WordPress settings
define( 'WP_DEBUG', false );
define( 'WP_DEBUG_LOG', false );
define( 'WP_DEBUG_DISPLAY', false );
define( 'SCRIPT_DEBUG', false );

// Security settings
define( 'DISALLOW_FILE_EDIT', true );
define( 'DISALLOW_FILE_MODS', false );
define( 'FORCE_SSL_ADMIN', true );
define( 'WP_AUTO_UPDATE_CORE', 'minor' );

// Performance settings
define( 'WP_MEMORY_LIMIT', '$(load_state "PHP_MEMORY_LIMIT" "256M")' );
define( 'WP_MAX_MEMORY_LIMIT', '$(load_state "PHP_MEMORY_LIMIT" "256M")' );
define( 'COMPRESS_CSS', true );
define( 'COMPRESS_SCRIPTS', true );
define( 'CONCATENATE_SCRIPTS', false );
define( 'ENFORCE_GZIP', true );

// Content settings
define( 'WP_POST_REVISIONS', 10 );
define( 'AUTOSAVE_INTERVAL', 120 );
define( 'EMPTY_TRASH_DAYS', 30 );
define( 'WP_CRON_LOCK_TIMEOUT', 60 );

// File system
define( 'FS_METHOD', 'direct' );
define( 'FS_CHMOD_DIR', ( 0755 & ~ umask() ) );
define( 'FS_CHMOD_FILE', ( 0644 & ~ umask() ) );

// URLs
define( 'WP_HOME', 'https://$domain' );
define( 'WP_SITEURL', 'https://$domain' );
define( 'WP_CONTENT_URL', 'https://$domain/wp-content' );

// Paths
define( 'WP_CONTENT_DIR', dirname( __FILE__ ) . '/wp-content' );
define( 'WP_PLUGIN_DIR', WP_CONTENT_DIR . '/plugins' );
define( 'UPLOADS', 'wp-content/uploads' );

EOF

    # Add Redis configuration if enabled
    if [ "$(load_state "ENABLE_REDIS")" = "true" ]; then
        local redis_pass=$(load_state "REDIS_PASS")
        sudo tee -a "$wp_root/wp-config.php" >/dev/null <<EOF

// Redis Object Cache
define( 'WP_REDIS_HOST', '127.0.0.1' );
define( 'WP_REDIS_PORT', 6379 );
define( 'WP_REDIS_PASSWORD', '$redis_pass' );
define( 'WP_REDIS_MAXTTL', 86400 );
define( 'WP_REDIS_PREFIX', '${domain//[.-]/_}_' );
define( 'WP_REDIS_DATABASE', 0 );
define( 'WP_REDIS_TIMEOUT', 1 );
define( 'WP_REDIS_READ_TIMEOUT', 1 );

EOF
    fi
    
    # Complete wp-config.php
    sudo tee -a "$wp_root/wp-config.php" >/dev/null <<'EOF'

// Custom content directory (optional security)
// define( 'WP_CONTENT_FOLDERNAME', 'content' );

/* That's all, stop editing! Happy publishing. */

/** Absolute path to the WordPress directory. */
if ( ! defined( 'ABSPATH' ) ) {
    define( 'ABSPATH', __DIR__ . '/' );
}

/** Sets up WordPress vars and included files. */
require_once ABSPATH . 'wp-settings.php';
EOF
    
    debug "WordPress configuration created"
}

set_wordpress_permissions() {
    local wp_root=$(load_state "WP_ROOT")
    local wp_user=$(load_state "WP_USER")
    local php_user=$(load_state "PHP_USER" "php-fpm")
    
    info "Setting secure permissions..."
    
    # Set ownership
    sudo chown -R "$wp_user:wordpress" "$wp_root"
    
    # Base permissions
    sudo find "$wp_root" -type d -exec chmod 755 {} \;
    sudo find "$wp_root" -type f -exec chmod 644 {} \;
    
    # Secure wp-config.php
    sudo chmod 640 "$wp_root/wp-config.php"
    sudo chown "$wp_user:$php_user" "$wp_root/wp-config.php"
    
    # Writable directories for PHP user
    local writable_dirs=(
        "wp-content/uploads"
        "wp-content/cache"
        "wp-content/upgrade"
        "wp-content/wflogs"
    )
    
    for dir in "${writable_dirs[@]}"; do
        sudo mkdir -p "$wp_root/$dir"
        sudo chown -R "$php_user:wordpress" "$wp_root/$dir"
        sudo chmod -R 775 "$wp_root/$dir"
    done
    
    # Protect sensitive files
    local protected_files=(
        ".htaccess"
        "wp-config.php"
        "readme.html"
        "license.txt"
    )
    
    for file in "${protected_files[@]}"; do
        [ -f "$wp_root/$file" ] && sudo chmod 640 "$wp_root/$file"
    done
    
    debug "Permissions set securely"
}

install_default_plugins() {
    local wp_root=$(load_state "WP_ROOT")
    local wp_user=$(load_state "WP_USER")
    local plugins=$(load_state "WP_PLUGINS")
    
    if [ -z "$plugins" ]; then
        info "No default plugins selected"
        return 0
    fi
    
    info "Installing default plugins..."
    
    # Install plugins using WP-CLI as wp_user
    for plugin in $plugins; do
        info "Installing plugin: $plugin"
        sudo -u "$wp_user" wp plugin install "$plugin" --path="$wp_root" || {
            warning "Failed to install plugin: $plugin"
        }
    done
    
    # Special handling for Redis cache
    if [[ "$plugins" =~ "redis-cache" ]] && [ "$(load_state "ENABLE_REDIS")" = "true" ]; then
        # Enable Redis object cache
        sudo -u "$wp_user" wp redis enable --path="$wp_root" || {
            warning "Failed to enable Redis object cache"
        }
    fi
}

finalize_wordpress_install() {
    local wp_root=$(load_state "WP_ROOT")
    local domain=$(load_state "DOMAIN")
    local admin_email=$(load_state "ADMIN_EMAIL")
    
    info "Finalizing WordPress installation..."
    
    # Create .htaccess for pretty permalinks
    sudo tee "$wp_root/.htaccess" >/dev/null <<'EOF'
# BEGIN WordPress
<IfModule mod_rewrite.c>
RewriteEngine On
RewriteBase /
RewriteRule ^index\.php$ - [L]
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule . /index.php [L]
</IfModule>
# END WordPress

# Security headers
<IfModule mod_headers.c>
    Header set X-Content-Type-Options "nosniff"
    Header set X-Frame-Options "SAMEORIGIN"
    Header set X-XSS-Protection "1; mode=block"
</IfModule>

# Protect wp-config.php
<files wp-config.php>
    order allow,deny
    deny from all
</files>

# Disable directory browsing
Options -Indexes

# Block access to sensitive files
<FilesMatch "^\.">
    Order allow,deny
    Deny from all
</FilesMatch>
EOF
    
    # Set correct permissions on .htaccess
    sudo chown $(load_state "WP_USER"):$(load_state "PHP_USER") "$wp_root/.htaccess"
    sudo chmod 644 "$wp_root/.htaccess"
    
    # Create robots.txt
    sudo tee "$wp_root/robots.txt" >/dev/null <<EOF
User-agent: *
Disallow: /wp-admin/
Disallow: /wp-includes/
Disallow: /wp-content/plugins/
Disallow: /wp-content/themes/
Disallow: /wp-content/upgrade/
Allow: /wp-admin/admin-ajax.php
Sitemap: https://$domain/sitemap.xml
EOF
    
    # Remove installation files
    sudo rm -f "$wp_root/readme.html" "$wp_root/license.txt" "$wp_root/wp-config-sample.php"
    
    # Store installation info
    save_state "WP_INSTALL_DATE" "$(date +%Y-%m-%d)"
    save_state "WP_INSTALL_METHOD" "fresh"
    
    info "WordPress installation ready for final setup via browser"
    info "Visit https://$domain to complete installation"
}

# Import existing WordPress site
import_wordpress_site() {
    info "=== Import WordPress Site ==="
    
    # Check if basic configuration exists
    if ! state_exists "CONFIG_COMPLETED"; then
        info "Configuration required for import..."
        configure_interactive
    fi
    
    # Check if users are configured (MUST come before database setup)
    if ! state_exists "USERS_CONFIGURED"; then
        info "Setting up users for import..."
        setup_users
    fi
    
    # Check if database is set up (AFTER users exist)
    if ! state_exists "DATABASE_CONFIGURED"; then
        info "Setting up database for import..."
        setup_database
    fi
    
    echo "Import source options:"
    echo "1) Remote URL"
    echo "2) Local directory"
    
    read -p "Select import source [1-2]: " import_choice
    
    case $import_choice in
        1) import_from_url ;;
        2) import_from_directory ;;
        *) error "Invalid choice"; return 1 ;;
    esac
}

import_from_url() {
    read -p "Enter URL of backup archive: " backup_url
    
    # Create temp directory
    local temp_dir="$WP_MGMT_DIR/tmp"
    mkdir -p "$temp_dir"
    
    # Generate filename from URL
    local filename=$(basename "$backup_url")
    local temp_file="$temp_dir/$filename"
    
    # Check if file already exists
    if [ -f "$temp_file" ]; then
        local file_age=$(($(date +%s) - $(stat -c %Y "$temp_file")))
        local file_size=$(du -h "$temp_file" | cut -f1)
        
        echo "Found existing download: $filename ($file_size, $(($file_age / 3600)) hours old)"
        
        if confirm "Use existing file instead of re-downloading?" Y; then
            info "Using existing file: $temp_file"
        else
            info "Downloading fresh copy..."
            download_backup_file "$backup_url" "$temp_file"
        fi
    else
        info "Downloading backup to $temp_file..."
        download_backup_file "$backup_url" "$temp_file"
    fi
    
    import_from_archive "$temp_file"
    
    # Ask if user wants to keep the download
    if confirm "Keep downloaded backup file for future use?" N; then
        info "Backup saved at: $temp_file"
    else
        rm -f "$temp_file"
        info "Downloaded file cleaned up"
    fi
}

download_backup_file() {
    local url="$1"
    local output_file="$2"
    
    if curl -fL --progress-bar "$url" -o "$output_file"; then
        success "Download completed"
    else
        error "Failed to download backup from URL"
        return 1
    fi
}

import_from_directory() {
    read -p "Enter path to backup archive: " backup_path
    
    if [ ! -f "$backup_path" ]; then
        error "Archive file not found: $backup_path"
        return 1
    fi
    
    import_from_archive "$backup_path"
}

import_from_archive() {
    local archive_file=$1
    local wp_root=$(load_state "WP_ROOT")
    local temp_dir="/tmp/wp-import-$$"
    
    if [ ! -f "$archive_file" ]; then
        error "Archive file not found: $archive_file"
        return 1
    fi
    
    info "Extracting archive..."
    mkdir -p "$temp_dir"
    
    # Extract main archive
    if ! tar -xzf "$archive_file" -C "$temp_dir"; then
        error "Failed to extract archive"
        rm -rf "$temp_dir"
        return 1
    fi
    
    # Find the extracted content (might be in subdirectory)
    local extract_dir
    if [ -f "$temp_dir/wp-config.php" ]; then
        extract_dir="$temp_dir"
    else
        # Look for subdirectory containing wp-config.php
        extract_dir=$(find "$temp_dir" -name "wp-config.php" -type f -exec dirname {} \; | head -1)
        if [ -z "$extract_dir" ]; then
            error "wp-config.php not found in archive"
            rm -rf "$temp_dir"
            return 1
        fi
    fi
    
    # Validate backup structure
    validate_backup_structure "$extract_dir"
    if [ $? -ne 0 ]; then
        error "Invalid backup format"
        rm -rf "$temp_dir"
        return 1
    fi
    
    # Process database dump
    process_database_import "$extract_dir"
    
    # Process wp-content
    process_wp_content_import "$extract_dir" "$wp_root"
    
    # Download WordPress core if needed
    if [ ! -f "$wp_root/wp-login.php" ]; then
        info "Downloading WordPress core..."
        download_wordpress "latest"
        extract_wordpress
    fi
    
    # Update wp-config.php with new credentials
    configure_wordpress
    
    # Set permissions
    set_wordpress_permissions
    
    # Update URLs if domain changed
    update_site_urls "$extract_dir"
    
    # Cleanup
    rm -rf "$temp_dir"
    
    save_state "WORDPRESS_INSTALLED" "true"
    save_state "WP_INSTALL_METHOD" "import"
    
    success "WordPress site imported successfully"
}

validate_backup_structure() {
    local extract_dir=$1
    local errors=()
    
    info "Validating backup structure..."
    
    # Check for required files
    if [ ! -f "$extract_dir/wp-config.php" ]; then
        errors+=("wp-config.php not found")
    fi
    
    # Check for database dump using pattern matching
    local db_file=""
    db_file=$(find "$extract_dir" -maxdepth 1 -name "*.sql*" -type f | head -1)
    
    if [ -z "$db_file" ]; then
        errors+=("Database dump not found (expected *.sql or *.sql.gz)")
    fi
    
    # Check for wp-content (directory or archive)
    local wp_content_source=""
    if [ -d "$extract_dir/wp-content" ]; then
        wp_content_source="directory"
    elif [ -f "$extract_dir/wp-content.tar.gz" ]; then
        wp_content_source="archive"
    else
        errors+=("wp-content not found (expected directory or wp-content.tar.gz)")
    fi
    
    if [ ${#errors[@]} -gt 0 ]; then
        error "Backup validation failed:"
        for err in "${errors[@]}"; do
            error "  - $err"
        done
        return 1
    fi
    
    info "✓ Backup structure valid (wp-content: $wp_content_source, database: $(basename "$db_file"))"
    return 0
}

check_database_setup() {
    local db_name=$(load_state "DB_NAME")
    local db_user=$(load_state "DB_USER")
    local db_pass=$(load_state "DB_PASS")
    
    # Test database connection
    if ! mysql -u "$db_user" --password="$db_pass" -e "SELECT 1;" >/dev/null 2>&1; then
        error "Cannot connect to database with user: $db_user"
        error "Run fresh installation first to set up database"
        return 1
    fi
    
    info "Database connection verified"
    return 0
}

process_database_import() {
    local extract_dir=$1
    local db_name=$(load_state "DB_NAME")
    local db_user=$(load_state "DB_USER")
    local db_pass=$(load_state "DB_PASS")
    
    info "Importing database..."
    
    # Find database dump file using pattern
    local db_file=$(find "$extract_dir" -maxdepth 1 -name "*.sql*" -type f | head -1)
    
    if [ -z "$db_file" ]; then
        error "Database dump file not found"
        return 1
    fi
    
    info "Found database file: $(basename "$db_file")"
    
    # Ensure database exists before importing
    info "Creating database if it doesn't exist..."
    mysql -u "$db_user" --password="$db_pass" -e "CREATE DATABASE IF NOT EXISTS \`$db_name\`;"
    
    if [ $? -ne 0 ]; then
        error "Failed to create/access database: $db_name"
        return 1
    fi
    
    # Import based on file type with explicit database selection
    info "Importing data into database: $db_name"
    if [[ "$db_file" =~ \.gz$ ]]; then
        gunzip -c "$db_file" | mysql -u "$db_user" --password="$db_pass" --database="$db_name"
    elif [[ "$db_file" =~ \.sql$ ]]; then
        mysql -u "$db_user" --password="$db_pass" --database="$db_name" < "$db_file"
    else
        error "Unsupported database file format: $db_file"
        return 1
    fi
    
    if [ $? -eq 0 ]; then
        success "Database imported successfully"
    else
        error "Database import failed"
        return 1
    fi
}

process_wp_content_import() {
    local extract_dir=$1
    local wp_root=$2
    
    info "Importing wp-content..."
    
    # Remove existing wp-content
    sudo rm -rf "$wp_root/wp-content"
    
    if [ -d "$extract_dir/wp-content" ]; then
        # wp-content is a directory
        sudo cp -a "$extract_dir/wp-content" "$wp_root/"
    elif [ -f "$extract_dir/wp-content.tar.gz" ]; then
        # wp-content is compressed
        cd "$wp_root"
        sudo tar -xzf "$extract_dir/wp-content.tar.gz"
    else
        error "wp-content not found in backup"
        return 1
    fi
    
    success "wp-content imported successfully"
}

update_site_urls() {
    local extract_dir=$1
    local new_domain=$(load_state "DOMAIN")
    local wp_root=$(load_state "WP_ROOT")
    local wp_user=$(load_state "WP_USER")
    
    # Try to extract old domain from wp-config.php
    local old_domain=""
    if [ -f "$extract_dir/wp-config.php" ]; then
        old_domain=$(grep -oP "define\s*\(\s*['\"]WP_HOME['\"],\s*['\"]https?://\K[^'\"]+(?=['\"])" "$extract_dir/wp-config.php" || true)
    fi
    
    if [ -n "$old_domain" ] && [ "$old_domain" != "$new_domain" ]; then
        info "Updating URLs from $old_domain to $new_domain..."
        
        # Use WP-CLI to update URLs
        sudo -u "$wp_user" wp search-replace "$old_domain" "$new_domain" \
            --all-tables \
            --path="$wp_root" || {
            warning "URL replacement failed - you may need to update URLs manually"
        }
    else
        info "No URL updates needed"
    fi
}

# Restore from backup
restore_from_backup() {
    local backup_dir=$(load_state "WP_ROOT")/backups
    
    if [ ! -d "$backup_dir" ]; then
        error "No backup directory found"
        return 1
    fi
    
    info "Available backups:"
    local backups=($(ls -1t "$backup_dir"/*.tar.gz 2>/dev/null))
    
    if [ ${#backups[@]} -eq 0 ]; then
        error "No backups found"
        return 1
    fi
    
    # List backups
    local i=1
    for backup in "${backups[@]}"; do
        echo "$i) $(basename "$backup") - $(stat -c %y "$backup" | cut -d' ' -f1)"
        ((i++))
    done
    
    read -p "Select backup to restore [1-${#backups[@]}]: " choice
    
    if [[ "$choice" =~ ^[0-9]+$ ]] && [ "$choice" -ge 1 ] && [ "$choice" -le ${#backups[@]} ]; then
        local selected_backup="${backups[$((choice-1))]}"
        import_from_archive "$selected_backup"
    else
        error "Invalid selection"
        return 1
    fi
}

debug "WordPress module loaded successfully"