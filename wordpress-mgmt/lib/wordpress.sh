#!/bin/bash
# wordpress-mgmt/lib/wordpress.sh - WordPress installation and management
# Version: 3.0.10

install_wordpress() {
    info "Installing WordPress..."
    
    if state_exists "WORDPRESS_INSTALLED"; then
        # Verify existing installation
        if verify_wordpress_installation; then
            info "✓ WordPress already installed and verified"
            return 0
        else
            warning "WordPress marked as installed but verification failed - reinstalling"
            remove_state "WORDPRESS_INSTALLED"
        fi
    fi
    
    # Installation steps
    show_progress 1 7 "Downloading WordPress"
    download_wordpress "$(load_state "WP_VERSION")"
    
    show_progress 2 7 "Extracting WordPress files"
    extract_wordpress
    
    show_progress 3 7 "Configuring WordPress"
    configure_wordpress
    
    show_progress 4 7 "Setting permissions"
    set_wordpress_permissions
    
    show_progress 5 7 "Installing plugins"
    install_default_plugins
    
    show_progress 6 7 "Finalizing installation"
    finalize_wordpress_install

    show_progress 7 7 "Verifying installation"
    verify_wordpress_installation
    
    # Ensure consistent permissions after WordPress setup
    ensure_wordpress_permissions
    
    save_state "WORDPRESS_INSTALLED" "true"
    success "✓ WordPress installed successfully"
}

download_wordpress() {
    local version=$1
    local wp_root=$(load_state "WP_ROOT")
    local wp_user=$(load_state "WP_USER")
    
    # Create temporary directory
    local temp_dir="/tmp/wordpress-install-$$"
    mkdir -p "$temp_dir"
    
    # Download WordPress
    if [ "$version" = "latest" ]; then
        info "Downloading latest WordPress..."
        curl -sL https://wordpress.org/latest.tar.gz -o "$temp_dir/wordpress.tar.gz"
    else
        info "Downloading WordPress $version..."
        curl -sL "https://wordpress.org/wordpress-$version.tar.gz" -o "$temp_dir/wordpress.tar.gz"
    fi
    
    # Verify download
    if [ ! -f "$temp_dir/wordpress.tar.gz" ]; then
        error "Failed to download WordPress"
        return 1
    fi
    
    # Extract to verify
    tar -tzf "$temp_dir/wordpress.tar.gz" >/dev/null 2>&1 || {
        error "Downloaded file is not a valid tar.gz"
        return 1
    }
    
    save_state "WP_TEMP_DIR" "$temp_dir"
    debug "WordPress downloaded to $temp_dir"
}

extract_wordpress() {
    local temp_dir=$(load_state "WP_TEMP_DIR")
    local wp_root=$(load_state "WP_ROOT")
    local wp_user=$(load_state "WP_USER")
    
    # Create WordPress root directory
    sudo mkdir -p "$wp_root"
    
    # Extract WordPress
    info "Extracting WordPress files..."
    cd "$temp_dir"
    tar -xzf wordpress.tar.gz
    
    # Move files to destination
    sudo rsync -a wordpress/ "$wp_root/"
    
    # Clean up
    rm -rf "$temp_dir"
    
    debug "WordPress extracted to $wp_root"
}

configure_wordpress() {
    local wp_root=$(load_state "WP_ROOT")
    local domain=$(load_state "DOMAIN")
    local db_name=$(load_state "DB_NAME")
    local db_user=$(load_state "DB_USER")
    local db_pass=$(load_state "DB_PASS")
    
    info "Configuring WordPress..."
    
    # Copy wp-config-sample.php
    sudo cp "$wp_root/wp-config-sample.php" "$wp_root/wp-config.php"
    
    # Generate salts
    local salts=$(curl -sL https://api.wordpress.org/secret-key/1.1/salt/)
    
    # Create wp-config.php with security enhancements
    sudo tee "$wp_root/wp-config.php" >/dev/null <<EOF
<?php
/**
 * WordPress Configuration File
 * Generated by setup-wordpress.sh
 */

// Database settings
define( 'DB_NAME', '$db_name' );
define( 'DB_USER', '$db_user' );
define( 'DB_PASSWORD', '$db_pass' );
define( 'DB_HOST', 'localhost' );
define( 'DB_CHARSET', 'utf8mb4' );
define( 'DB_COLLATE', 'utf8mb4_unicode_520_ci' );

// Table prefix (randomized for security)
\$table_prefix = 'wp_$(generate_password 6 | tr '[:upper:]' '[:lower:]' | tr -d '[:punct:]')_';

// Authentication keys and salts
$salts

// WordPress settings
define( 'WP_DEBUG', false );
define( 'WP_DEBUG_LOG', false );
define( 'WP_DEBUG_DISPLAY', false );
define( 'SCRIPT_DEBUG', false );

// Security settings
define( 'DISALLOW_FILE_EDIT', true );
define( 'DISALLOW_FILE_MODS', false );
define( 'FORCE_SSL_ADMIN', true );
define( 'WP_AUTO_UPDATE_CORE', 'minor' );

// Performance settings
define( 'WP_MEMORY_LIMIT', '$(load_state "PHP_MEMORY_LIMIT" "256M")' );
define( 'WP_MAX_MEMORY_LIMIT', '$(load_state "PHP_MEMORY_LIMIT" "256M")' );
define( 'COMPRESS_CSS', true );
define( 'COMPRESS_SCRIPTS', true );
define( 'CONCATENATE_SCRIPTS', false );
define( 'ENFORCE_GZIP', true );

// Content settings
define( 'WP_POST_REVISIONS', 10 );
define( 'AUTOSAVE_INTERVAL', 120 );
define( 'EMPTY_TRASH_DAYS', 30 );
define( 'WP_CRON_LOCK_TIMEOUT', 60 );

// File system
define( 'FS_METHOD', 'direct' );
define( 'FS_CHMOD_DIR', ( 0755 & ~ umask() ) );
define( 'FS_CHMOD_FILE', ( 0644 & ~ umask() ) );

// URLs
define( 'WP_HOME', 'https://$domain' );
define( 'WP_SITEURL', 'https://$domain' );
define( 'WP_CONTENT_URL', 'https://$domain/wp-content' );

// Paths
define( 'WP_CONTENT_DIR', dirname( __FILE__ ) . '/wp-content' );
define( 'WP_PLUGIN_DIR', WP_CONTENT_DIR . '/plugins' );
define( 'UPLOADS', 'wp-content/uploads' );

EOF

    # Add Redis configuration if enabled
    if [ "$(load_state "ENABLE_REDIS")" = "true" ]; then
        local redis_pass=$(load_state "REDIS_PASS")
        sudo tee -a "$wp_root/wp-config.php" >/dev/null <<EOF

// Redis Object Cache
define( 'WP_REDIS_HOST', '127.0.0.1' );
define( 'WP_REDIS_PORT', 6379 );
define( 'WP_REDIS_PASSWORD', '$redis_pass' );
define( 'WP_REDIS_MAXTTL', 86400 );
define( 'WP_REDIS_PREFIX', '${domain//[.-]/_}_' );
define( 'WP_REDIS_DATABASE', 0 );
define( 'WP_REDIS_TIMEOUT', 1 );
define( 'WP_REDIS_READ_TIMEOUT', 1 );

EOF
    fi
    
    # Complete wp-config.php
    sudo tee -a "$wp_root/wp-config.php" >/dev/null <<'EOF'

// Custom content directory (optional security)
// define( 'WP_CONTENT_FOLDERNAME', 'content' );

/* That's all, stop editing! Happy publishing. */

/** Absolute path to the WordPress directory. */
if ( ! defined( 'ABSPATH' ) ) {
    define( 'ABSPATH', __DIR__ . '/' );
}

/** Sets up WordPress vars and included files. */
require_once ABSPATH . 'wp-settings.php';
EOF
    
    debug "WordPress configuration created"
}

set_wordpress_permissions() {
    local wp_root=$(load_state "WP_ROOT")
    local wp_user=$(load_state "WP_USER")
    local php_user=$(load_state "PHP_USER" "php-fpm")
    
    info "Setting secure permissions..."
    
    # Set ownership
    sudo chown -R "$wp_user:wordpress" "$wp_root"
    
    # Base permissions
    sudo find "$wp_root" -type d -exec chmod 755 {} \;
    sudo find "$wp_root" -type f -exec chmod 644 {} \;
    
    # Secure wp-config.php
    sudo chmod 640 "$wp_root/wp-config.php"
    sudo chown "$wp_user:$php_user" "$wp_root/wp-config.php"
    
    # Writable directories for PHP user
    local writable_dirs=(
        "wp-content/uploads"
        "wp-content/cache"
        "wp-content/upgrade"
        "wp-content/wflogs"
    )
    
    for dir in "${writable_dirs[@]}"; do
        sudo mkdir -p "$wp_root/$dir"
        sudo chown -R "$php_user:wordpress" "$wp_root/$dir"
        sudo chmod -R 775 "$wp_root/$dir"
    done
    
    # Protect sensitive files
    local protected_files=(
        ".htaccess"
        "wp-config.php"
        "readme.html"
        "license.txt"
    )
    
    for file in "${protected_files[@]}"; do
        [ -f "$wp_root/$file" ] && sudo chmod 640 "$wp_root/$file"
    done
    
    debug "Permissions set securely"
}

install_default_plugins() {
    local wp_root=$(load_state "WP_ROOT")
    local wp_user=$(load_state "WP_USER")
    local plugins=$(load_state "WP_PLUGINS")
    
    if [ -z "$plugins" ]; then
        info "No default plugins selected"
        return 0
    fi
    
    # Check if WordPress is installed (database tables exist)
    if ! sudo -u "$wp_user" wp core is-installed --path="$wp_root" 2>/dev/null; then
        warning "WordPress not yet installed - deferring plugin installation"
        info "Install plugins manually after WordPress setup: wp plugin install $plugins"
        return 0
    fi
    
    info "Installing default plugins..."
    
    for plugin in $plugins; do
        info "Installing plugin: $plugin"
        sudo -u "$wp_user" wp plugin install "$plugin" --path="$wp_root" || {
            warning "Failed to install plugin: $plugin"
        }
    done
}

finalize_wordpress_install() {
    local wp_root=$(load_state "WP_ROOT")
    local domain=$(load_state "DOMAIN")
    local admin_email=$(load_state "ADMIN_EMAIL")
    
    info "Finalizing WordPress installation..."
    
    # Create database tables if they don't exist
    local wp_user=$(load_state "WP_USER")
    if ! sudo -u "$wp_user" wp core is-installed --path="$wp_root" 2>/dev/null; then
        info "Creating WordPress database tables..."
        
        # Generate secure admin password
        local admin_pass=$(generate_password 16)
        save_state "WP_ADMIN_PASS" "$admin_pass"
        
        # Install WordPress database
        sudo -u "$wp_user" wp core install \
            --url="https://$domain" \
            --title="WordPress Site" \
            --admin_user="admin" \
            --admin_password="$admin_pass" \
            --admin_email="$admin_email" \
            --path="$wp_root"
        
        info "WordPress admin credentials:"
        info "  Username: admin"
        info "  Password: $admin_pass"
        info "  Email: $admin_email"
        
        # Install selected plugins
        local plugins=$(load_state "WP_PLUGINS")
        if [ -n "$plugins" ]; then
            info "Installing selected plugins: $plugins"
            sudo -u "$wp_user" wp plugin install $plugins --path="$wp_root"
            sudo -u "$wp_user" wp plugin activate $plugins --path="$wp_root"
        fi
    else
        info "WordPress database tables already exist"
    fi
    
    # Create robots.txt
    sudo tee "$wp_root/robots.txt" >/dev/null <<EOF
User-agent: *
Disallow: /wp-admin/
Disallow: /wp-includes/
Disallow: /wp-content/plugins/
Disallow: /wp-content/themes/
Disallow: /wp-content/upgrade/
Allow: /wp-admin/admin-ajax.php
Sitemap: https://$domain/sitemap.xml
EOF
    
    # Remove installation files
    sudo rm -f "$wp_root/readme.html" "$wp_root/license.txt" "$wp_root/wp-config-sample.php"
    
    # Store installation info
    save_state "WP_INSTALL_DATE" "$(date +%Y-%m-%d)"
    save_state "WP_INSTALL_METHOD" "fresh"
    
    info "WordPress installation ready for final setup via browser"
    info "Visit https://$domain to complete installation"
}

verify_wordpress_installation() {
    local wp_root=$(load_state "WP_ROOT")
    local wp_user=$(load_state "WP_USER")
    local domain=$(load_state "DOMAIN")
    
    info "Verifying WordPress installation..."
    
    # Check core files exist
    if [ ! -f "$wp_root/wp-login.php" ] || [ ! -f "$wp_root/wp-config.php" ]; then
        error "WordPress core files missing"
        return 1
    fi
    
    # Check database tables exist
    if ! sudo -u "$wp_user" wp db tables --path="$wp_root" >/dev/null 2>&1; then
        error "WordPress database tables missing"
        return 1
    fi
    
    # Check WordPress can connect to database
    if ! sudo -u "$wp_user" wp db check --path="$wp_root" >/dev/null 2>&1; then
        error "WordPress database connection failed"
        return 1
    fi
    
    # Check site URL configuration
    local site_url=$(sudo -u "$wp_user" wp option get siteurl --path="$wp_root" 2>/dev/null)
    if [ "$site_url" != "https://$domain" ]; then
        warning "Site URL mismatch: $site_url vs https://$domain"
        sudo -u "$wp_user" wp option update siteurl "https://$domain" --path="$wp_root"
        sudo -u "$wp_user" wp option update home "https://$domain" --path="$wp_root"
    fi
    
    success "WordPress installation verified"
    return 0
}

# Import existing WordPress site
import_wordpress_site() {
    info "=== Import WordPress Site ==="
    
    # Check if basic configuration exists
    if ! state_exists "CONFIG_COMPLETED"; then
        info "Configuration required for import..."
        configure_interactive
    fi
    
    # Check if users are configured (MUST come before database setup)
    if ! state_exists "USERS_CONFIGURED"; then
        info "Setting up users for import..."
        setup_users
    fi
    
    # Check if database is set up (AFTER users exist)
    if ! state_exists "DATABASE_CONFIGURED"; then
        info "Setting up database for import..."
        setup_database
    fi
    
    echo
    echo "Import source options:"
    echo "1) Remote URL"
    echo "2) Local directory"
    echo "3) Remote SSH server"  # NEW OPTION
    echo
    
    read -p "Select import source [1-3]: " import_choice
    
    case $import_choice in
        1) import_from_url ;;
        2) import_from_directory ;;
        3) import_from_ssh ;;     # NEW
        *) error "Invalid choice"; return 1 ;;
    esac
    
    # After successful import, complete the WordPress infrastructure setup
    complete_wordpress_setup
}

import_from_url() {
    read -p "Enter URL of backup archive: " backup_url
    
    # Create temp directory
    local temp_dir="$WP_MGMT_DIR/tmp"
    mkdir -p "$temp_dir"
    
    # Generate filename from URL
    local filename=$(basename "$backup_url")
    local temp_file="$temp_dir/$filename"
    
    # Check if file already exists
    if [ -f "$temp_file" ]; then
        local file_age=$(($(date +%s) - $(stat -c %Y "$temp_file")))
        local file_size=$(du -h "$temp_file" | cut -f1)
        
        echo "Found existing download: $filename ($file_size, $(($file_age / 3600)) hours old)"
        
        if confirm "Use existing file instead of re-downloading?" Y; then
            info "Using existing file: $temp_file"
        else
            info "Downloading fresh copy..."
            download_backup_file "$backup_url" "$temp_file"
        fi
    else
        info "Downloading backup to $temp_file..."
        download_backup_file "$backup_url" "$temp_file"
    fi
    
    import_from_archive "$temp_file"
    
    # Ask if user wants to keep the download
    if confirm "Keep downloaded backup file for future use?" N; then
        info "Backup saved at: $temp_file"
    else
        rm -f "$temp_file"
        info "Downloaded file cleaned up"
    fi
}

download_backup_file() {
    local url="$1"
    local output_file="$2"
    
    if curl -fL --progress-bar "$url" -o "$output_file"; then
        success "Download completed"
    else
        error "Failed to download backup from URL"
        return 1
    fi
}

import_from_directory() {
    echo
    echo "You can provide either:"
    echo "• Path to backup archive (.tar.gz file)"
    echo "• Path to directory containing backup archives"
    echo "• Path to extracted backup directory"
    echo
    read -p "Enter path to backup archive or directory: " backup_path
    
    # Expand path with proper user home directory (handles sudo correctly)
    backup_path=$(expand_user_path "$backup_path")
    
    # Debug info for troubleshooting
    debug "Original input: $backup_path"
    debug "Resolved path: $backup_path"
    debug "Current user: $(whoami)"
    debug "Sudo user: ${SUDO_USER:-none}"
    debug "User home: $(get_user_home)"
    
    # Check what the user provided
    if [ -f "$backup_path" ]; then
        # It's a file - check if it's an archive
        if [[ "$backup_path" =~ \.(tar\.gz|tgz)$ ]]; then
            info "Using archive file: $backup_path"
            import_from_archive "$backup_path"
        else
            error "File must be a .tar.gz archive"
            error "Found: $(file "$backup_path" 2>/dev/null | cut -d: -f2)"
            return 1
        fi
    elif [ -d "$backup_path" ]; then
        # It's a directory - check what's inside
        info "Scanning directory: $backup_path"
        handle_directory_import "$backup_path"
    else
        error "Path not found: $backup_path"
        echo
        echo "Please check:"
        echo "• File/directory exists"
        echo "• Path is correct (use tab completion)"
        echo "• You have read permissions"
        echo
        echo "Example paths:"
        echo "• ~/wordpress-mgmt/tmp/backup.tar.gz"
        echo "• ~/wordpress-mgmt/tmp/"
        echo "• ~/wordpress-mgmt/tmp/wp-import-139285/wordpress_ssh_backup_20250915_085057"
        return 1
    fi
}

handle_directory_import() {
    local dir_path=$1
    
    # Look for .tar.gz archives in the directory
    local archives=($(find "$dir_path" -maxdepth 1 -name "*.tar.gz" -type f | sort -r))
    
    if [ ${#archives[@]} -gt 0 ]; then
        # Found archives - let user select
        echo
        echo "Found ${#archives[@]} backup archive(s) in directory:"
        echo "────────────────────────────────────────────────"
        
        local i=1
        for archive in "${archives[@]}"; do
            local file_name=$(basename "$archive")
            local file_size=$(du -h "$archive" | cut -f1)
            local file_date=$(stat -c %y "$archive" | cut -d' ' -f1)
            echo "$i) $file_name ($file_size, $file_date)"
            ((i++))
        done
        
        echo
        read -p "Select archive to import [1-${#archives[@]}]: " choice
        
        if [[ "$choice" =~ ^[0-9]+$ ]] && [ "$choice" -ge 1 ] && [ "$choice" -le ${#archives[@]} ]; then
            local selected_archive="${archives[$((choice-1))]}"
            info "Selected: $(basename "$selected_archive")"
            import_from_archive "$selected_archive"
        else
            error "Invalid selection"
            return 1
        fi
    else
        # No archives found - check if it's an extracted backup directory
        info "No .tar.gz archives found in directory"
        info "Checking if directory contains extracted backup..."
        
        if validate_backup_structure "$dir_path"; then
            info "Found extracted backup structure"
            import_from_extracted_directory "$dir_path"
        else
            error "Directory contains neither backup archives nor extracted backup structure"
            echo
            echo "Directory contents:"
            ls -la "$dir_path" | head -10
            echo
            echo "Expected either:"
            echo "• .tar.gz backup archives"
            echo "• Extracted backup with wp-config.php, db.sql*, and wp-content/"
            return 1
        fi
    fi
}

import_from_extracted_directory() {
    local extract_dir=$1
    local wp_root=$(load_state "WP_ROOT")
    
    info "Processing extracted backup directory..."
    
    # Validate backup structure
    if ! validate_backup_structure "$extract_dir"; then
        error "Invalid backup directory structure"
        return 1
    fi
    
    # Process database dump
    process_database_import "$extract_dir"
    
    # Process wp-content
    process_wp_content_import "$extract_dir" "$wp_root"
    
    # Ensure WordPress core files are present
    ensure_wordpress_core

    # Process additional folders
    process_additional_folders_import "$extract_dir" "$wp_root"
        
    # Configure WordPress for import
    configure_wordpress_import "$extract_dir"
    
    # Set permissions
    set_wordpress_permissions
    
    # Update URLs if domain changed
    update_site_urls "$extract_dir"
    
    save_state "WORDPRESS_INSTALLED" "true"
    save_state "WP_INSTALL_METHOD" "import"
    
    success "WordPress site imported successfully from directory"
}

# Import WordPress site via SSH
import_from_ssh() {
    info "=== Import WordPress via SSH ==="
    echo
    
    # Ensure sshpass is available
    ensure_sshpass || return 1
    
    # Collect SSH connection details
    get_ssh_credentials || return 1
    
    # Test connection and discover WordPress sites
    if ! test_ssh_connection; then
        error "SSH connection failed"
        return 1
    fi
    
    # Discover and select WordPress site
    local selected_wp_dir
    selected_wp_dir=$(discover_and_select_wordpress) || return 1

    # Discover additional folders to include
    local additional_folders
    additional_folders=$(discover_additional_folders "$selected_wp_dir") || true
    
    # Store for backup creation
    REMOTE_ADDITIONAL_FOLDERS="$additional_folders"
    
    # Extract database credentials
    local db_creds
    db_creds=$(extract_remote_db_creds "$selected_wp_dir") || return 1
    
    # Confirm database settings
    confirm_database_settings "$db_creds" || return 1
    
    # Create and transfer backup
    local backup_file
    backup_file=$(create_and_transfer_backup "$selected_wp_dir") || return 1
    
    # Import using existing system (same as URL import)
    import_from_archive "$backup_file"
    
    # Cleanup temp file
    rm -f "$backup_file"
    
    success "SSH import completed successfully"
}

# Collect SSH connection credentials  
get_ssh_credentials() {
    info "SSH Connection Settings"
    echo "────────────────────────"
    
    # Initialize variables
    SSH_HOST=""
    SSH_PORT=""
    SSH_USER=""
    SSH_PASS=""
    
    # Get SSH details with direct input to avoid subshell issues
    while [ -z "$SSH_HOST" ]; do
        echo -n "SSH hostname/IP: "
        read -r SSH_HOST
        [ -z "$SSH_HOST" ] && error "Hostname required"
    done
    
    echo -n "SSH port [22]: "
    read -r SSH_PORT
    SSH_PORT=${SSH_PORT:-22}
    
    while [ -z "$SSH_USER" ]; do
        echo -n "SSH username: "
        read -r SSH_USER
        [ -z "$SSH_USER" ] && error "Username required"
    done
    
    while [ -z "$SSH_PASS" ]; do
        echo -n "SSH password: "
        read -s SSH_PASS
        echo
        [ -z "$SSH_PASS" ] && error "Password required"
    done
    
    info "Testing SSH connection to $SSH_USER@$SSH_HOST:$SSH_PORT..."
    return 0
}

# Test SSH connection and basic commands
test_ssh_connection() {
    # Test connection with timeout
    if ! sshpass -p "$SSH_PASS" ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no -p "$SSH_PORT" "$SSH_USER@$SSH_HOST" 'echo "Connection test successful"' >/dev/null 2>&1; then
        error "SSH connection failed. Please check credentials and network connectivity."
        return 1
    fi
    
    # Test required commands
    local test_result
    test_result=$(sshpass -p "$SSH_PASS" ssh -p "$SSH_PORT" "$SSH_USER@$SSH_HOST" 'LC_ALL=C command -v mysql && command -v tar && command -v php' 2>/dev/null)
    
    local missing_commands=()
    if ! echo "$test_result" | grep -q mysql; then
        missing_commands+=("mysql")
    fi
    if ! echo "$test_result" | grep -q tar; then
        missing_commands+=("tar")
    fi
    if ! echo "$test_result" | grep -q php; then
        missing_commands+=("php")
    fi
    
    if [ ${#missing_commands[@]} -gt 0 ]; then
        warning "Missing commands on remote server: ${missing_commands[*]}"
        if ! confirm "Continue anyway? (may cause backup failures)" N; then
            return 1
        fi
    fi
    
    success "SSH connection verified"
    return 0
}

# Discover WordPress installations and let user select
discover_and_select_wordpress() {
    info "Discovering WordPress installations..." >&2
    
    # Find all wp-config.php files
    local wp_sites
    wp_sites=$(sshpass -p "$SSH_PASS" ssh -p "$SSH_PORT" "$SSH_USER@$SSH_HOST" 'LC_ALL=C find ~ -name "wp-config.php" -type f 2>/dev/null | head -10' 2>/dev/null)
    
    if [ -z "$wp_sites" ]; then
        error "No WordPress installations found"
        return 1
    fi
    
    # Convert to array
    local sites_array=()
    while IFS= read -r site; do
        [ -n "$site" ] && sites_array+=("$site")
    done <<< "$wp_sites"
    
    # If only one site, use it
    if [ ${#sites_array[@]} -eq 1 ]; then
        local selected_site="${sites_array[0]}"
        local wp_dir=$(dirname "$selected_site")
        info "Found single WordPress site: $wp_dir" >&2
        echo "$wp_dir"
        return 0
    fi
    
    # Multiple sites - show selection menu
    echo >&2
    echo "Multiple WordPress sites found:" >&2
    echo "─────────────────────────────────" >&2
    
    local i=1
    for site in "${sites_array[@]}"; do
        local wp_dir=$(dirname "$site")
        local site_name=$(basename "$wp_dir")
        
        # Try to get site title via WP-CLI
        local site_title=""
        site_title=$(sshpass -p "$SSH_PASS" ssh -p "$SSH_PORT" "$SSH_USER@$SSH_HOST" "cd '$wp_dir' && LC_ALL=C wp option get blogname 2>/dev/null" 2>/dev/null || echo "")
        
        if [ -n "$site_title" ]; then
            echo "$i) $wp_dir" >&2
            echo "   Site: $site_title" >&2
        else
            echo "$i) $wp_dir" >&2
        fi
        echo >&2
        ((i++))
    done
    
    # Default to public_html if it exists
    local default_choice=""
    local j=1
    for site in "${sites_array[@]}"; do
        if [[ "$(dirname "$site")" =~ public_html$ ]]; then
            default_choice="$j"
            break
        fi
        ((j++))
    done
    
    # Get user selection
    local prompt="Select WordPress site"
    [ -n "$default_choice" ] && prompt="$prompt [$default_choice]"
    prompt="$prompt: "
    
    local choice
    echo -ne "\033[1;36m${prompt}\033[0m" >&2
    read -r choice
    choice=${choice:-$default_choice}
    
    # Validate selection
    if [[ ! "$choice" =~ ^[0-9]+$ ]] || [ "$choice" -lt 1 ] || [ "$choice" -gt ${#sites_array[@]} ]; then
        error "Invalid selection"
        return 1
    fi
    
    # Return selected directory
    local selected_site="${sites_array[$((choice-1))]}"
    local wp_dir=$(dirname "$selected_site")
    
    info "Selected: $wp_dir" >&2
    echo "$wp_dir"
}

# Discover and select additional folders from remote server
# Discover and select additional folders from remote server
discover_additional_folders() {
    local wp_dir=$1
    
    info "Checking for additional folders to copy..." >&2
    
    # Use a single-line command for better SSH compatibility
    local folders
    folders=$(sshpass -p "$SSH_PASS" ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no -p "$SSH_PORT" "$SSH_USER@$SSH_HOST" "cd '$wp_dir' 2>/dev/null && find . -maxdepth 1 -type d -printf '%f\n' 2>/dev/null | grep -v -E '^(\\.|wp-content|wp-admin|wp-includes|cgi-bin|\\.well-known)$' | sort" 2>/dev/null)
    
    # Debug output
    debug "Raw folder output: $folders" >&2
    
    if [ -z "$folders" ]; then
        debug "No additional folders found" >&2
        echo ""
        return 0
    fi
    
    # Count folders
    local folder_count=$(echo "$folders" | wc -l)
    info "Found $folder_count potential additional folder(s)" >&2
    
    # Ask if user wants to include additional folders
    echo >&2
    if ! confirm "Include additional (non-standard) folders in backup?" N; then
        echo ""
        return 0
    fi
    
    echo >&2
    echo "Available additional folders:" >&2
    echo "────────────────────────────" >&2
    
    # Display folders with numbers
    local i=1
    while IFS= read -r folder; do
        [ -n "$folder" ] && echo "$i) $folder" >&2
        ((i++))
    done <<< "$folders"
    
    echo >&2
    echo "Enter folder names to include (one per line, empty to finish):" >&2
    echo "Example: cache" >&2
    echo >&2
    
    local selected_folders=()
    while true; do
        local folder_input
        echo -n "> " >&2
        read -r folder_input
        
        # Break on empty input
        [ -z "$folder_input" ] && break
        
        # Remove any leading/trailing whitespace
        folder_input=$(echo "$folder_input" | xargs)
        
        # Validate folder exists in list
        if echo "$folders" | grep -q "^${folder_input}$"; then
            # Double-check folder exists on remote (with timeout)
            if timeout 5 sshpass -p "$SSH_PASS" ssh -p "$SSH_PORT" "$SSH_USER@$SSH_HOST" "test -d '$wp_dir/$folder_input'" 2>/dev/null; then
                # Check if already selected
                if [[ " ${selected_folders[*]} " =~ " ${folder_input} " ]]; then
                    warning "Already selected: $folder_input" >&2
                else
                    selected_folders+=("$folder_input")
                    success "Added: $folder_input" >&2
                fi
            else
                warning "Folder not accessible: $folder_input" >&2
            fi
        else
            warning "Invalid folder: $folder_input" >&2
            echo "Available folders: $folders" | tr '\n' ' ' >&2
            echo >&2
        fi
    done
    
    if [ ${#selected_folders[@]} -gt 0 ]; then
        info "Selected additional folders: ${selected_folders[*]}" >&2
        # Return space-separated list
        echo "${selected_folders[*]}"
    else
        info "No additional folders selected" >&2
        echo ""
    fi
}
# Extract database credentials from remote wp-config.php
extract_remote_db_creds() {
    local wp_dir=$1
    
    info "Extracting database credentials..."
    
    # Method 1: Use PHP to parse wp-config.php (most reliable)
    local php_result
    php_result=$(sshpass -p "$SSH_PASS" ssh -p "$SSH_PORT" "$SSH_USER@$SSH_HOST" "cd '$wp_dir' && LC_ALL=C php -r \"
include 'wp-config.php';
echo 'DB_NAME=' . DB_NAME . '\n';
echo 'DB_USER=' . DB_USER . '\n';
echo 'DB_PASSWORD=' . DB_PASSWORD . '\n';
echo 'DB_HOST=' . DB_HOST . '\n';
\"" 2>/dev/null)
    
    if [ $? -eq 0 ] && [ -n "$php_result" ]; then
        echo "$php_result"
        return 0
    fi
    
    # Method 2: Use WP-CLI as fallback
    info "PHP parsing failed, trying WP-CLI..."
    local wp_result
    wp_result=$(sshpass -p "$SSH_PASS" ssh -p "$SSH_PORT" "$SSH_USER@$SSH_HOST" "cd '$wp_dir' && wp config list --format=shell --fields=name,value 2>/dev/null | grep '^DB_'" 2>/dev/null)
    
    if [ $? -eq 0 ] && [ -n "$wp_result" ]; then
        echo "$wp_result"
        return 0
    fi
    
    # Method 3: Manual parsing as last resort
    warning "WP-CLI failed, using manual parsing..."
    local manual_result
    manual_result=$(sshpass -p "$SSH_PASS" ssh -p "$SSH_PORT" "$SSH_USER@$SSH_HOST" "cd '$wp_dir' && LC_ALL=C grep -E \"define.*'DB_\" wp-config.php | sed -n \"s/.*define.*'\\([^']*\\)'.*'\\([^']*\\)'.*/\\1=\\2/p\"" 2>/dev/null)
    
    if [ -n "$manual_result" ]; then
        echo "$manual_result"
        return 0
    fi
    
    error "Failed to extract database credentials"
    return 1
}

# Confirm database settings with user
confirm_database_settings() {
    local db_creds=$1
    
    echo
    info "Database Credentials Found:"
    echo "─────────────────────────────"
    
    # Parse credentials (handle both newlines and \n literals)
    local db_name="" db_user="" db_password="" db_host=""
    
    # Convert literal \n to actual newlines if needed
    local cleaned_creds
    cleaned_creds=$(echo "$db_creds" | sed 's/\\n/\n/g')
    
    while IFS='=' read -r key value; do
        case $key in
            DB_NAME) db_name="$value" ;;
            DB_USER) db_user="$value" ;;
            DB_PASSWORD) db_password="$value" ;;
            DB_HOST) db_host="$value" ;;
        esac
    done <<< "$cleaned_creds"
    
    # Display (with masked password)
    echo "Database Name: $db_name"
    echo "Database User: $db_user"
    echo "Database Host: $db_host"
    echo "Database Password: ${db_password:0:3}***"
    echo
    
    # Store for later use
    REMOTE_DB_NAME="$db_name"
    REMOTE_DB_USER="$db_user"
    REMOTE_DB_PASS="$db_password"
    REMOTE_DB_HOST="$db_host"
    
    if ! confirm "Use these database credentials?" Y; then
        echo
        info "Enter custom database credentials:"
        REMOTE_DB_NAME=$(get_input "Database name" "$db_name")
        REMOTE_DB_USER=$(get_input "Database user" "$db_user")
        REMOTE_DB_PASS=$(get_input "Database password" "" true)
        REMOTE_DB_HOST=$(get_input "Database host" "$db_host")
    fi
    
    return 0
}

# Create backup on remote server and transfer (same format as URL import)
create_and_transfer_backup() {
    local wp_dir=$1
    local timestamp=$(date +%Y%m%d_%H%M%S)
    local backup_name="wordpress_ssh_backup_$timestamp"
    local local_backup_file="$WP_MGMT_DIR/tmp/${backup_name}.tar.gz"
    
    # Create local tmp directory
    mkdir -p "$WP_MGMT_DIR/tmp"
    
    info "Creating remote backup..."
    
    # Create backup directory on remote server - use ~ instead of $HOME
    if ! sshpass -p "$SSH_PASS" ssh -p "$SSH_PORT" "$SSH_USER@$SSH_HOST" "LC_ALL=C mkdir -p ~/backup_temp/$backup_name && echo 'DIR_CREATED'" | grep -q "DIR_CREATED"; then
        error "Failed to create remote backup directory"
        return 1
    fi
    
    # Step 1: Copy wp-config.php
    info "Copying wp-config.php..."
    if ! sshpass -p "$SSH_PASS" ssh -p "$SSH_PORT" "$SSH_USER@$SSH_HOST" "LC_ALL=C cp '$wp_dir/wp-config.php' ~/backup_temp/$backup_name/ && echo 'CONFIG_COPIED'" | grep -q "CONFIG_COPIED"; then
        error "Failed to copy wp-config.php"
        return 1
    fi
    
    # Step 2: Create database dump
    info "Creating database dump..."
    
    # Try WP-CLI first with progress indicator
    if sshpass -p "$SSH_PASS" ssh -p "$SSH_PORT" "$SSH_USER@$SSH_HOST" "cd '$wp_dir' && LC_ALL=C wp db export ~/backup_temp/$backup_name/db.sql 2>/dev/null && echo 'DB_EXPORTED'" | grep -q "DB_EXPORTED"; then
        success "Database exported via WP-CLI"
    else
        # Try mysqldump as fallback
        info "WP-CLI failed, trying mysqldump..."
        if sshpass -p "$SSH_PASS" ssh -p "$SSH_PORT" "$SSH_USER@$SSH_HOST" "LC_ALL=C mysqldump -h'$REMOTE_DB_HOST' -u'$REMOTE_DB_USER' -p'$REMOTE_DB_PASS' '$REMOTE_DB_NAME' > ~/backup_temp/$backup_name/db.sql 2>/dev/null && echo 'DB_EXPORTED'" | grep -q "DB_EXPORTED"; then
            success "Database exported via mysqldump"
        else
            error "Database export failed"
            return 1
        fi
    fi
    
    # Compress database dump
    sshpass -p "$SSH_PASS" ssh -p "$SSH_PORT" "$SSH_USER@$SSH_HOST" "LC_ALL=C gzip ~/backup_temp/$backup_name/db.sql" 2>/dev/null || {
        warning "Failed to compress database dump"
    }
    
    # Step 3: Copy wp-content
    info "Copying wp-content directory..."
    if sshpass -p "$SSH_PASS" ssh -p "$SSH_PORT" "$SSH_USER@$SSH_HOST" "LC_ALL=C [ -d '$wp_dir/wp-content' ]" >/dev/null 2>&1; then
        # Show size first
        local wp_content_size=$(sshpass -p "$SSH_PASS" ssh -p "$SSH_PORT" "$SSH_USER@$SSH_HOST" "LC_ALL=C du -sh '$wp_dir/wp-content/' 2>/dev/null | cut -f1" 2>/dev/null || echo "unknown")
        info "wp-content size: $wp_content_size - copying..."
        
        # Use a more reliable copy method with explicit success checking
        if sshpass -p "$SSH_PASS" ssh -p "$SSH_PORT" "$SSH_USER@$SSH_HOST" "
            LC_ALL=C cp -r '$wp_dir/wp-content' ~/backup_temp/$backup_name/ && 
            echo 'COPY_SUCCESS'
        " | grep -q "COPY_SUCCESS"; then
            success "wp-content copied successfully"
        else
            error "Failed to copy wp-content"
            return 1
        fi
    else
        warning "wp-content directory not found - continuing without it"
    fi

    # Step 3b: Copy additional folders if specified
    if [ -n "${REMOTE_ADDITIONAL_FOLDERS:-}" ]; then
        info "Copying additional folders..."
        
        # Create container for additional folders
        mkdir -p ~/backup_temp/$backup_name/additional-folders
        
        for folder in $REMOTE_ADDITIONAL_FOLDERS; do
            info "Copying folder: $folder..."
            if sshpass -p "$SSH_PASS" ssh -p "$SSH_PORT" "$SSH_USER@$SSH_HOST" "
                LC_ALL=C [ -d '$wp_dir/$folder' ] && 
                cp -r '$wp_dir/$folder' ~/backup_temp/$backup_name/additional-folders/ && 
                echo 'FOLDER_COPIED'
            " | grep -q "FOLDER_COPIED"; then
                success "Folder copied: $folder"
            else
                warning "Failed to copy folder: $folder"
            fi
        done
    fi
    
    # Step 4: Create archive
    info "Creating backup archive..."
    if ! sshpass -p "$SSH_PASS" ssh -p "$SSH_PORT" "$SSH_USER@$SSH_HOST" "cd ~/backup_temp && LC_ALL=C tar -czf '${backup_name}.tar.gz' '$backup_name' && echo 'ARCHIVE_CREATED'" | grep -q "ARCHIVE_CREATED"; then
        error "Failed to create backup archive"
        return 1
    fi
    
    # Step 5: Transfer archive
    info "Transferring backup archive..."
    
    # Show progress for large transfers
    if sshpass -p "$SSH_PASS" scp -P "$SSH_PORT" "$SSH_USER@$SSH_HOST:~/backup_temp/${backup_name}.tar.gz" "$local_backup_file"; then
        success "Backup transferred successfully"
    else
        error "Failed to transfer backup"
        return 1
    fi
    
    # Step 6: Cleanup remote files
    info "Cleaning up remote files..."
    sshpass -p "$SSH_PASS" ssh -p "$SSH_PORT" "$SSH_USER@$SSH_HOST" "LC_ALL=C rm -rf ~/backup_temp/$backup_name ~/backup_temp/${backup_name}.tar.gz" || {
        warning "Failed to cleanup remote files"
    }
    
    # Verify local file
    if [ ! -f "$local_backup_file" ]; then
        error "Backup file not found locally: $local_backup_file"
        return 1
    fi
    
    local file_size=$(du -h "$local_backup_file" | cut -f1)
    success "Backup ready: $local_backup_file ($file_size)"
    
    echo "$local_backup_file"
}

# Install sshpass if not available
ensure_sshpass() {
    if ! command -v sshpass &>/dev/null; then
        info "Installing sshpass for SSH password authentication..."
        sudo apt-get update -qq
        sudo apt-get install -y sshpass
        
        if ! command -v sshpass &>/dev/null; then
            error "Failed to install sshpass"
            return 1
        fi
        
        success "sshpass installed successfully"
    fi
    return 0
}

# Collect SSH connection credentials

# Test SSH connection and basic commands
test_ssh_connection() {
    # Test connection with timeout
    if ! sshpass -p "$SSH_PASS" ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no -p "$SSH_PORT" "$SSH_USER@$SSH_HOST" 'echo "Connection test successful"' >/dev/null 2>&1; then
        error "SSH connection failed. Please check credentials and network connectivity."
        return 1
    fi
    
    # Test required commands
    local missing_commands=()
    local test_result
    
    test_result=$(sshpass -p "$SSH_PASS" ssh -p "$SSH_PORT" "$SSH_USER@$SSH_HOST" 'LC_ALL=C command -v mysql && command -v tar && command -v php' 2>/dev/null)
    
    if ! echo "$test_result" | grep -q mysql; then
        missing_commands+=("mysql")
    fi
    if ! echo "$test_result" | grep -q tar; then
        missing_commands+=("tar")
    fi
    if ! echo "$test_result" | grep -q php; then
        missing_commands+=("php")
    fi
    
    if [ ${#missing_commands[@]} -gt 0 ]; then
        error "Missing required commands on remote server: ${missing_commands[*]}"
        return 1
    fi
    
    success "SSH connection verified"
    return 0
}

# Discover WordPress installations and let user select

# Extract database credentials from remote wp-config.php
extract_remote_db_creds() {
    local wp_dir=$1
    
    info "Extracting database credentials..."
    
    # Method 1: Use PHP to parse wp-config.php (most reliable)
    local php_result
    php_result=$(sshpass -p "$SSH_PASS" ssh -p "$SSH_PORT" "$SSH_USER@$SSH_HOST" "cd '$wp_dir' && LC_ALL=C php -r \"
include 'wp-config.php';
echo 'DB_NAME=' . DB_NAME . '\n';
echo 'DB_USER=' . DB_USER . '\n';
echo 'DB_PASSWORD=' . DB_PASSWORD . '\n';
echo 'DB_HOST=' . DB_HOST . '\n';
\"" 2>/dev/null)
    
    if [ $? -eq 0 ] && [ -n "$php_result" ]; then
        echo "$php_result"
        return 0
    fi
    
    # Method 2: Use WP-CLI as fallback
    info "PHP parsing failed, trying WP-CLI..."
    local wp_result
    wp_result=$(sshpass -p "$SSH_PASS" ssh -p "$SSH_PORT" "$SSH_USER@$SSH_HOST" "cd '$wp_dir' && wp config list --format=shell --fields=name,value 2>/dev/null | grep '^DB_'")
    
    if [ $? -eq 0 ] && [ -n "$wp_result" ]; then
        echo "$wp_result"
        return 0
    fi
    
    # Method 3: Manual parsing as last resort
    warning "WP-CLI failed, using manual parsing..."
    local manual_result
    manual_result=$(sshpass -p "$SSH_PASS" ssh -p "$SSH_PORT" "$SSH_USER@$SSH_HOST" "cd '$wp_dir' && LC_ALL=C grep -E \"define.*'DB_\" wp-config.php | sed -n \"s/.*define.*'\\([^']*\\)'.*'\\([^']*\\)'.*/\\1=\\2/p\"" 2>/dev/null)
    
    if [ -n "$manual_result" ]; then
        echo "$manual_result"
        return 0
    fi
    
    error "Failed to extract database credentials"
    return 1
}

# Confirm database settings with user
confirm_database_settings() {
    local db_creds=$1
    
    echo
    info "Database Credentials Found:"
    echo "─────────────────────────────"
    
    # Parse credentials (handle both newlines and \n literals)
    local db_name="" db_user="" db_password="" db_host=""
    
    # Convert literal \n to actual newlines if needed
    local cleaned_creds
    cleaned_creds=$(echo "$db_creds" | sed 's/\\n/\n/g')
    
    while IFS='=' read -r key value; do
        case $key in
            DB_NAME) db_name="$value" ;;
            DB_USER) db_user="$value" ;;
            DB_PASSWORD) db_password="$value" ;;
            DB_HOST) db_host="$value" ;;
        esac
    done <<< "$cleaned_creds"
    
    # Display (with masked password)
    echo "Database Name: $db_name"
    echo "Database User: $db_user"
    echo "Database Host: $db_host"
    echo "Database Password: ${db_password:0:3}***"
    echo
    
    # Store for later use
    REMOTE_DB_NAME="$db_name"
    REMOTE_DB_USER="$db_user"
    REMOTE_DB_PASS="$db_password"
    REMOTE_DB_HOST="$db_host"
    
    if ! confirm "Use these database credentials?" Y; then
        echo
        info "Enter custom database credentials:"
        REMOTE_DB_NAME=$(get_input "Database name" "$db_name")
        REMOTE_DB_USER=$(get_input "Database user" "$db_user")
        REMOTE_DB_PASS=$(get_input "Database password" "" true)
        REMOTE_DB_HOST=$(get_input "Database host" "$db_host")
    fi
    
    return 0
}

# Create backup on remote server and transfer

# Install sshpass if not available
ensure_sshpass() {
    if ! command -v sshpass &>/dev/null; then
        info "Installing sshpass for password authentication..."
        sudo apt-get update -qq
        sudo apt-get install -y sshpass
    fi
}

import_from_archive() {
    local archive_file=$1
    local wp_root=$(load_state "WP_ROOT")
    local temp_dir="$WP_MGMT_DIR/tmp/wp-import-$$"
    
    if [ ! -f "$archive_file" ]; then
        error "Archive file not found: $archive_file"
        return 1
    fi
    
    # Check disk space before extraction
    local archive_size=$(stat -c%s "$archive_file")
    local available_space=$(df "$WP_MGMT_DIR" | awk 'NR==2 {print $4*1024}')
    
    if [ "$archive_size" -gt "$((available_space - 1073741824))" ]; then
        error "Insufficient disk space for extraction"
        error "Archive size: $(du -h "$archive_file" | cut -f1)"
        error "Available space: $(df -h "$WP_MGMT_DIR" | awk 'NR==2 {print $4}')"
        return 1
    fi
    
    info "Extracting $(du -h "$archive_file" | cut -f1) archive to main filesystem..."
    mkdir -p "$temp_dir"
    
    # Rest of the function continues as before...
    if ! tar -xzf "$archive_file" -C "$temp_dir"; then
        error "Failed to extract archive"
        rm -rf "$temp_dir"
        return 1
    fi
    
    # Extract main archive
    if ! tar -xzf "$archive_file" -C "$temp_dir"; then
        error "Failed to extract archive"
        rm -rf "$temp_dir"
        return 1
    fi
    
    # Find the extracted content (might be in subdirectory)
    local extract_dir
    if [ -f "$temp_dir/wp-config.php" ]; then
        extract_dir="$temp_dir"
    else
        # Look for subdirectory containing wp-config.php
        extract_dir=$(find "$temp_dir" -name "wp-config.php" -type f -exec dirname {} \; | head -1)
        if [ -z "$extract_dir" ]; then
            error "wp-config.php not found in archive"
            rm -rf "$temp_dir"
            return 1
        fi
    fi
    
    # Validate backup structure
    validate_backup_structure "$extract_dir"
    if [ $? -ne 0 ]; then
        error "Invalid backup format"
        rm -rf "$temp_dir"
        return 1
    fi
    
    # Process database dump
    process_database_import "$extract_dir"
    
    # Process wp-content
    process_wp_content_import "$extract_dir" "$wp_root"

    # Process additional folders (NEW)
    process_additional_folders_import "$extract_dir" "$wp_root"
    
    # Ensure WordPress core files are present
    ensure_wordpress_core
    
    # Configure WordPress for import (different from fresh install)
    configure_wordpress_import "$extract_dir"
    
    # Set permissions
    set_wordpress_permissions
    
    # Update URLs if domain changed
    update_site_urls "$extract_dir"
    
    # Cleanup
    rm -rf "$temp_dir"
    
    save_state "WORDPRESS_INSTALLED" "true"
    save_state "WP_INSTALL_METHOD" "import"
    
    success "WordPress site imported successfully"
}

ensure_wordpress_core() {
    local wp_root=$(load_state "WP_ROOT")
    
    # Check for essential WordPress files
    local required_files=("wp-login.php" "wp-config-sample.php" "wp-settings.php" "index.php")
    local missing_files=()
    
    for file in "${required_files[@]}"; do
        if [ ! -f "$wp_root/$file" ]; then
            missing_files+=("$file")
        fi
    done
    
    if [ ${#missing_files[@]} -gt 0 ]; then
        info "WordPress core files missing: ${missing_files[*]}"
        info "Downloading and extracting WordPress core..."
        
        # Backup imported wp-content if it exists
        if [ -d "$wp_root/wp-content" ]; then
            sudo mv "$wp_root/wp-content" "$wp_root/wp-content.import.backup"
        fi
        
        # Download and extract WordPress
        download_wordpress "latest"
        extract_wordpress
        
        # Restore imported wp-content
        if [ -d "$wp_root/wp-content.import.backup" ]; then
            sudo rm -rf "$wp_root/wp-content"
            sudo mv "$wp_root/wp-content.import.backup" "$wp_root/wp-content"
        fi
        
        success "WordPress core files restored"
    else
        info "WordPress core files verified"
    fi
}

configure_wordpress_import() {
    local extract_dir=$1
    local wp_root=$(load_state "WP_ROOT")
    local domain=$(load_state "DOMAIN")
    local db_name=$(load_state "DB_NAME")
    local db_user=$(load_state "DB_USER")
    local db_pass=$(load_state "DB_PASS")
    
    info "Configuring WordPress for imported site..."
    
    # Check if imported wp-config.php exists and is usable
    if [ -f "$extract_dir/wp-config.php" ]; then
        info "Using imported wp-config.php as base..."
        sudo cp "$extract_dir/wp-config.php" "$wp_root/wp-config.php"
    elif [ -f "$wp_root/wp-config-sample.php" ]; then
        info "Creating wp-config.php from sample..."
        sudo cp "$wp_root/wp-config-sample.php" "$wp_root/wp-config.php"
    else
        error "Neither imported wp-config.php nor wp-config-sample.php found"
        return 1
    fi
    
    # Update database credentials in wp-config.php
    info "Updating database credentials..."
    sudo sed -i "s/define( *'DB_NAME'.*/define( 'DB_NAME', '$db_name' );/" "$wp_root/wp-config.php"
    sudo sed -i "s/define( *'DB_USER'.*/define( 'DB_USER', '$db_user' );/" "$wp_root/wp-config.php"
    sudo sed -i "s/define( *'DB_PASSWORD'.*/define( 'DB_PASSWORD', '$db_pass' );/" "$wp_root/wp-config.php"
    sudo sed -i "s/define( *'DB_HOST'.*/define( 'DB_HOST', 'localhost' );/" "$wp_root/wp-config.php"
    
    # Update URLs for new domain
    info "Updating domain configuration..."
    
    # Remove any existing WP_HOME/WP_SITEURL definitions
    sudo sed -i "/define.*WP_HOME/d" "$wp_root/wp-config.php"
    sudo sed -i "/define.*WP_SITEURL/d" "$wp_root/wp-config.php"
    
    # Add new domain configuration before the closing PHP tag
    sudo sed -i "/\/\* That's all, stop editing/i\\
// Domain configuration for imported site\\
define( 'WP_HOME', 'https://$domain' );\\
define( 'WP_SITEURL', 'https://$domain' );\\
define( 'FORCE_SSL_ADMIN', true );\\
" "$wp_root/wp-config.php"
    
    # Ensure proper file permissions
    sudo chown "$(load_state "WP_USER"):wordpress" "$wp_root/wp-config.php"
    sudo chmod 640 "$wp_root/wp-config.php"
    
    debug "WordPress configuration updated for import"
}

validate_backup_structure() {
    local extract_dir=$1
    local errors=()
    local warnings=()
    
    info "Validating backup structure in: $(basename "$extract_dir")"
    
    # Check for required files
    if [ ! -f "$extract_dir/wp-config.php" ]; then
        errors+=("wp-config.php not found")
    fi
    
    # Check for database dump using pattern matching
    local db_files=($(find "$extract_dir" -maxdepth 1 -name "*.sql*" -type f))
    
    if [ ${#db_files[@]} -eq 0 ]; then
        errors+=("Database dump not found (expected *.sql or *.sql.gz)")
    elif [ ${#db_files[@]} -gt 1 ]; then
        warnings+=("Multiple database files found: ${db_files[*]}")
    fi
    
    # Check for wp-content (directory or archive)
    local wp_content_source=""
    if [ -d "$extract_dir/wp-content" ]; then
        wp_content_source="directory"
    elif [ -f "$extract_dir/wp-content.tar.gz" ]; then
        wp_content_source="archive"
    else
        errors+=("wp-content not found (expected directory or wp-content.tar.gz)")
    fi
    
    # Check for additional folders (optional)
    if [ -d "$extract_dir/additional-folders" ]; then
        local additional_count=$(find "$extract_dir/additional-folders" -maxdepth 1 -type d | wc -l)
        if [ "$additional_count" -gt 1 ]; then
            info "Found $((additional_count - 1)) additional folder(s)"
        fi
    fi
    
    # Show warnings
    if [ ${#warnings[@]} -gt 0 ]; then
        for warn in "${warnings[@]}"; do
            warning "$warn"
        done
    fi
    
    # Check for errors
    if [ ${#errors[@]} -gt 0 ]; then
        error "Backup validation failed:"
        for err in "${errors[@]}"; do
            error "  - $err"
        done
        echo
        echo "Directory contents:"
        ls -la "$extract_dir" | head -10
        return 1
    fi
    
    # Update success message to include additional folders info
    local additional_info=""
    [ -d "$extract_dir/additional-folders" ] && additional_info=", additional folders: yes"
    
    success "✓ Backup structure valid (wp-content: $wp_content_source, database: $(basename "${db_files[0]}")$additional_info)"
}

check_database_setup() {
    local db_name=$(load_state "DB_NAME")
    local db_user=$(load_state "DB_USER")
    local db_pass=$(load_state "DB_PASS")
    
    # Test database connection
    if ! mysql -u "$db_user" --password="$db_pass" -e "SELECT 1;" >/dev/null 2>&1; then
        error "Cannot connect to database with user: $db_user"
        error "Run fresh installation first to set up database"
        return 1
    fi
    
    info "Database connection verified"
    return 0
}

process_database_import() {
    local extract_dir=$1
    local db_name=$(load_state "DB_NAME")
    local db_user=$(load_state "DB_USER")
    local db_pass=$(load_state "DB_PASS")
    
    info "Importing database..."
    
    # Find database dump file using pattern
    local db_file=$(find "$extract_dir" -maxdepth 1 -name "*.sql*" -type f | head -1)
    
    if [ -z "$db_file" ]; then
        error "Database dump file not found"
        return 1
    fi
    
    info "Found database file: $(basename "$db_file")"
    
    # Ensure database exists before importing
    info "Creating database if it doesn't exist..."
    mysql -u "$db_user" --password="$db_pass" -e "CREATE DATABASE IF NOT EXISTS \`$db_name\`;"
    
    if [ $? -ne 0 ]; then
        error "Failed to create/access database: $db_name"
        return 1
    fi
    
    # Import based on file type with explicit database selection
    info "Importing data into database: $db_name"
    if [[ "$db_file" =~ \.gz$ ]]; then
        gunzip -c "$db_file" | mysql -u "$db_user" --password="$db_pass" --database="$db_name"
    elif [[ "$db_file" =~ \.sql$ ]]; then
        mysql -u "$db_user" --password="$db_pass" --database="$db_name" < "$db_file"
    else
        error "Unsupported database file format: $db_file"
        return 1
    fi
    
    if [ $? -eq 0 ]; then
        success "Database imported successfully"
    else
        error "Database import failed"
        return 1
    fi
}

process_wp_content_import() {
    local extract_dir=$1
    local wp_root=$2
    
    info "Importing wp-content..."
    
    # Remove existing wp-content
    sudo rm -rf "$wp_root/wp-content"
    
    if [ -d "$extract_dir/wp-content" ]; then
        # wp-content is a directory
        sudo cp -a "$extract_dir/wp-content" "$wp_root/"
    elif [ -f "$extract_dir/wp-content.tar.gz" ]; then
        # wp-content is compressed
        cd "$wp_root"
        sudo tar -xzf "$extract_dir/wp-content.tar.gz"
    else
        error "wp-content not found in backup"
        return 1
    fi
    
    success "wp-content imported successfully"
}

process_additional_folders_import() {
    local extract_dir=$1
    local wp_root=$2
    
    if [ ! -d "$extract_dir/additional-folders" ]; then
        debug "No additional folders to import"
        return 0
    fi
    
    info "Importing additional folders..."
    
    # List folders to import
    local folders=($(find "$extract_dir/additional-folders" -maxdepth 1 -type d ! -path "$extract_dir/additional-folders" -printf "%f\n"))
    
    if [ ${#folders[@]} -eq 0 ]; then
        debug "No additional folders found in backup"
        return 0
    fi
    
    info "Found ${#folders[@]} additional folder(s): ${folders[*]}"
    
    for folder in "${folders[@]}"; do
        local source="$extract_dir/additional-folders/$folder"
        local dest="$wp_root/$folder"
        
        # Backup existing folder if it exists
        if [ -d "$dest" ]; then
            warning "Folder exists: $folder - creating backup"
            sudo mv "$dest" "${dest}.backup-$(date +%Y%m%d-%H%M%S)"
        fi
        
        # Copy folder
        info "Copying $folder to WordPress root..."
        sudo cp -a "$source" "$dest"
        
        # Set ownership (same as WordPress files)
        local wp_user=$(load_state "WP_USER")
        sudo chown -R "$wp_user:wordpress" "$dest"
        
        # Set permissions based on folder type
        if [[ "$folder" =~ ^(assets|images|media|files|downloads)$ ]]; then
            # Media/asset folders - readable
            sudo find "$dest" -type f -exec chmod 644 {} \;
            sudo find "$dest" -type d -exec chmod 755 {} \;
        else
            # Other folders - standard
            sudo find "$dest" -type f -exec chmod 644 {} \;
            sudo find "$dest" -type d -exec chmod 755 {} \;
        fi
        
        success "Imported: $folder"
    done
    
    success "Additional folders imported successfully"
}

update_site_urls() {
    local extract_dir=$1
    local new_domain=$(load_state "DOMAIN")
    local wp_root=$(load_state "WP_ROOT")
    local wp_user=$(load_state "WP_USER")
    
    # Try to extract old domain from wp-config.php
    local old_domain=""
    if [ -f "$extract_dir/wp-config.php" ]; then
        old_domain=$(grep -oP "define\s*\(\s*['\"]WP_HOME['\"],\s*['\"]https?://\K[^'\"]+(?=['\"])" "$extract_dir/wp-config.php" || true)
    fi
    
    if [ -n "$old_domain" ] && [ "$old_domain" != "$new_domain" ]; then
        info "Updating URLs from $old_domain to $new_domain..."
        
        # Use WP-CLI to update URLs
        sudo -u "$wp_user" wp search-replace "$old_domain" "$new_domain" \
            --all-tables \
            --path="$wp_root" || {
            warning "URL replacement failed - you may need to update URLs manually"
        }
    else
        info "No URL updates needed"
    fi
}

# Restore from backup
restore_from_backup() {
    local backup_dir=$(load_state "WP_ROOT")/backups
    
    if [ ! -d "$backup_dir" ]; then
        error "No backup directory found"
        return 1
    fi
    
    info "Available backups:"
    local backups=($(ls -1t "$backup_dir"/*.tar.gz 2>/dev/null))
    
    if [ ${#backups[@]} -eq 0 ]; then
        error "No backups found"
        return 1
    fi
    
    # List backups
    local i=1
    for backup in "${backups[@]}"; do
        echo "$i) $(basename "$backup") - $(stat -c %y "$backup" | cut -d' ' -f1)"
        ((i++))
    done
    
    read -p "Select backup to restore [1-${#backups[@]}]: " choice
    
    if [[ "$choice" =~ ^[0-9]+$ ]] && [ "$choice" -ge 1 ] && [ "$choice" -le ${#backups[@]} ]; then
        local selected_backup="${backups[$((choice-1))]}"
        import_from_archive "$selected_backup"
        
        # After successful restore, complete the WordPress infrastructure setup
        complete_wordpress_setup
    else
        error "Invalid selection"
        return 1
    fi
}

# Complete WordPress infrastructure setup (shared by import and restore)
complete_wordpress_setup() {
    info "=== Completing WordPress Infrastructure Setup ==="
    
    # Install required packages if not already installed
    if ! state_exists "PACKAGES_INSTALLED"; then
        info "Installing required packages..."
        install_packages
    fi
    
    # Configure Nginx web server
    if ! state_exists "NGINX_CONFIGURED"; then
        info "Configuring Nginx web server..."
        configure_nginx
    fi
    
    # Setup SSL certificates
    if ! state_exists "SSL_CONFIGURED"; then
        info "Setting up SSL certificates..."
        setup_ssl
    fi
    
    # Apply security hardening
    if ! state_exists "SECURITY_CONFIGURED"; then
        info "Applying security hardening..."
        apply_security
    fi
    
    # Setup backup system
    if ! state_exists "BACKUP_CONFIGURED"; then
        info "Setting up backup system..."
        setup_backup_system
    fi
    
    success "WordPress infrastructure setup completed successfully!"
    show_completion_summary
}

# Ensure consistent WordPress permissions after installation
ensure_wordpress_permissions() {
    local wp_root=$(load_state "WP_ROOT")
    local wp_user=$(load_state "WP_USER")
    
    info "Enforcing standardized WordPress permissions..."
    
    # Set consistent ownership - all files use wordpress group
    sudo chown -R "$wp_user:wordpress" "$wp_root"
    
    # Create necessary directories with correct permissions if they don't exist
    sudo mkdir -p "$wp_root"/{tmp,logs,backups}
    sudo chown "$wp_user:wordpress" "$wp_root"/{tmp,logs,backups}
    
    # Set proper permissions for backup/log directories
    sudo chmod 2750 "$wp_root"/{logs,backups}
    sudo chmod 2770 "$wp_root/tmp"
    
    # Ensure writable directories have correct ownership for PHP-FPM
    local writable_dirs=("wp-content/uploads" "wp-content/cache" "wp-content/upgrade")
    for dir in "${writable_dirs[@]}"; do
        if [ -d "$wp_root/$dir" ]; then
            sudo chown php-fpm:wordpress "$wp_root/$dir"
            sudo chmod 2775 "$wp_root/$dir"
        fi
    done
    
    debug "WordPress permissions standardized"
}

debug "WordPress module loaded successfully"
